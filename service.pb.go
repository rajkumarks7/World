// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: service.proto

package world

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=Username,json=username,proto3" json:"Username,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Firstname string `protobuf:"bytes,1,opt,name=Firstname,json=firstname,proto3" json:"Firstname,omitempty"`
	Lastname  string `protobuf:"bytes,2,opt,name=Lastname,json=lastname,proto3" json:"Lastname,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *Response) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

type ThermostatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostatname            string `protobuf:"bytes,1,opt,name=Thermostatname,json=thermostatname,proto3" json:"Thermostatname,omitempty"`
	Currenttemparature        int32  `protobuf:"varint,2,opt,name=Currenttemparature,json=currenttemparature,proto3" json:"Currenttemparature,omitempty"`
	Humdity                   int32  `protobuf:"varint,3,opt,name=Humdity,json=humdity,proto3" json:"Humdity,omitempty"`
	Systemmode                string `protobuf:"bytes,4,opt,name=Systemmode,json=systemmode,proto3" json:"Systemmode,omitempty"`
	Fanmode                   string `protobuf:"bytes,5,opt,name=Fanmode,json=fanmode,proto3" json:"Fanmode,omitempty"`
	MacAddress                string `protobuf:"bytes,6,opt,name=MacAddress,json=macAddress,proto3" json:"MacAddress,omitempty"`
	Temperatureoffset         int32  `protobuf:"varint,7,opt,name=Temperatureoffset,json=temperatureoffset,proto3" json:"Temperatureoffset,omitempty"`
	Heattemplimit             int32  `protobuf:"varint,8,opt,name=Heattemplimit,json=heattemplimit,proto3" json:"Heattemplimit,omitempty"`
	Cooltemplimit             int32  `protobuf:"varint,9,opt,name=Cooltemplimit,json=cooltemplimit,proto3" json:"Cooltemplimit,omitempty"`
	Thermostatfrimwareversion string `protobuf:"bytes,10,opt,name=Thermostatfrimwareversion,json=thermostatfrimwareversion,proto3" json:"Thermostatfrimwareversion,omitempty"`
	Thermostatmodel           string `protobuf:"bytes,11,opt,name=Thermostatmodel,json=thermostatmodel,proto3" json:"Thermostatmodel,omitempty"`
	OutdoorStages             int32  `protobuf:"varint,12,opt,name=OutdoorStages,json=outdoorStages,proto3" json:"OutdoorStages,omitempty"`
	IndoorStages              int32  `protobuf:"varint,13,opt,name=IndoorStages,json=indoorStages,proto3" json:"IndoorStages,omitempty"`
	Indoorconfiguration       string `protobuf:"bytes,14,opt,name=Indoorconfiguration,json=indoorconfiguration,proto3" json:"Indoorconfiguration,omitempty"`
	Outdoorconfiguration      string `protobuf:"bytes,15,opt,name=Outdoorconfiguration,json=outdoorconfiguration,proto3" json:"Outdoorconfiguration,omitempty"`
	Batterystatus             string `protobuf:"bytes,16,opt,name=Batterystatus,json=batterystatus,proto3" json:"Batterystatus,omitempty"`
	Heatcyclerate             string `protobuf:"bytes,17,opt,name=Heatcyclerate,json=heatcyclerate,proto3" json:"Heatcyclerate,omitempty"`
	Coolcyclerate             string `protobuf:"bytes,18,opt,name=Coolcyclerate,json=coolcyclerate,proto3" json:"Coolcyclerate,omitempty"`
	Boostheat                 bool   `protobuf:"varint,19,opt,name=Boostheat,json=boostheat,proto3" json:"Boostheat,omitempty"`
	Boostcool                 bool   `protobuf:"varint,20,opt,name=Boostcool,json=boostcool,proto3" json:"Boostcool,omitempty"`
	Protection                bool   `protobuf:"varint,21,opt,name=Protection,json=protection,proto3" json:"Protection,omitempty"`
	Earlystart                bool   `protobuf:"varint,22,opt,name=Earlystart,json=earlystart,proto3" json:"Earlystart,omitempty"`
	Humditydisplay            bool   `protobuf:"varint,23,opt,name=Humditydisplay,json=humditydisplay,proto3" json:"Humditydisplay,omitempty"`
	Timedisplay               bool   `protobuf:"varint,24,opt,name=Timedisplay,json=timedisplay,proto3" json:"Timedisplay,omitempty"`
	Continuousdisplay         bool   `protobuf:"varint,25,opt,name=Continuousdisplay,json=continuousdisplay,proto3" json:"Continuousdisplay,omitempty"`
	TemperatureDisplay        bool   `protobuf:"varint,26,opt,name=TemperatureDisplay,json=temperatureDisplay,proto3" json:"TemperatureDisplay,omitempty"`
	Addressline1              string `protobuf:"bytes,27,opt,name=Addressline1,json=addressline1,proto3" json:"Addressline1,omitempty"`
	Addressline2              string `protobuf:"bytes,28,opt,name=Addressline2,json=addressline2,proto3" json:"Addressline2,omitempty"`
	City                      string `protobuf:"bytes,29,opt,name=City,json=city,proto3" json:"City,omitempty"`
	State                     string `protobuf:"bytes,30,opt,name=State,json=state,proto3" json:"State,omitempty"`
	Country                   string `protobuf:"bytes,31,opt,name=Country,json=country,proto3" json:"Country,omitempty"`
	Zip                       string `protobuf:"bytes,32,opt,name=Zip,json=zip,proto3" json:"Zip,omitempty"`
	TimeZone                  string `protobuf:"bytes,33,opt,name=TimeZone,json=timeZone,proto3" json:"TimeZone,omitempty"`
	Userid                    int32  `protobuf:"varint,34,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
}

func (x *ThermostatResponse) Reset() {
	*x = ThermostatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermostatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermostatResponse) ProtoMessage() {}

func (x *ThermostatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermostatResponse.ProtoReflect.Descriptor instead.
func (*ThermostatResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *ThermostatResponse) GetThermostatname() string {
	if x != nil {
		return x.Thermostatname
	}
	return ""
}

func (x *ThermostatResponse) GetCurrenttemparature() int32 {
	if x != nil {
		return x.Currenttemparature
	}
	return 0
}

func (x *ThermostatResponse) GetHumdity() int32 {
	if x != nil {
		return x.Humdity
	}
	return 0
}

func (x *ThermostatResponse) GetSystemmode() string {
	if x != nil {
		return x.Systemmode
	}
	return ""
}

func (x *ThermostatResponse) GetFanmode() string {
	if x != nil {
		return x.Fanmode
	}
	return ""
}

func (x *ThermostatResponse) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ThermostatResponse) GetTemperatureoffset() int32 {
	if x != nil {
		return x.Temperatureoffset
	}
	return 0
}

func (x *ThermostatResponse) GetHeattemplimit() int32 {
	if x != nil {
		return x.Heattemplimit
	}
	return 0
}

func (x *ThermostatResponse) GetCooltemplimit() int32 {
	if x != nil {
		return x.Cooltemplimit
	}
	return 0
}

func (x *ThermostatResponse) GetThermostatfrimwareversion() string {
	if x != nil {
		return x.Thermostatfrimwareversion
	}
	return ""
}

func (x *ThermostatResponse) GetThermostatmodel() string {
	if x != nil {
		return x.Thermostatmodel
	}
	return ""
}

func (x *ThermostatResponse) GetOutdoorStages() int32 {
	if x != nil {
		return x.OutdoorStages
	}
	return 0
}

func (x *ThermostatResponse) GetIndoorStages() int32 {
	if x != nil {
		return x.IndoorStages
	}
	return 0
}

func (x *ThermostatResponse) GetIndoorconfiguration() string {
	if x != nil {
		return x.Indoorconfiguration
	}
	return ""
}

func (x *ThermostatResponse) GetOutdoorconfiguration() string {
	if x != nil {
		return x.Outdoorconfiguration
	}
	return ""
}

func (x *ThermostatResponse) GetBatterystatus() string {
	if x != nil {
		return x.Batterystatus
	}
	return ""
}

func (x *ThermostatResponse) GetHeatcyclerate() string {
	if x != nil {
		return x.Heatcyclerate
	}
	return ""
}

func (x *ThermostatResponse) GetCoolcyclerate() string {
	if x != nil {
		return x.Coolcyclerate
	}
	return ""
}

func (x *ThermostatResponse) GetBoostheat() bool {
	if x != nil {
		return x.Boostheat
	}
	return false
}

func (x *ThermostatResponse) GetBoostcool() bool {
	if x != nil {
		return x.Boostcool
	}
	return false
}

func (x *ThermostatResponse) GetProtection() bool {
	if x != nil {
		return x.Protection
	}
	return false
}

func (x *ThermostatResponse) GetEarlystart() bool {
	if x != nil {
		return x.Earlystart
	}
	return false
}

func (x *ThermostatResponse) GetHumditydisplay() bool {
	if x != nil {
		return x.Humditydisplay
	}
	return false
}

func (x *ThermostatResponse) GetTimedisplay() bool {
	if x != nil {
		return x.Timedisplay
	}
	return false
}

func (x *ThermostatResponse) GetContinuousdisplay() bool {
	if x != nil {
		return x.Continuousdisplay
	}
	return false
}

func (x *ThermostatResponse) GetTemperatureDisplay() bool {
	if x != nil {
		return x.TemperatureDisplay
	}
	return false
}

func (x *ThermostatResponse) GetAddressline1() string {
	if x != nil {
		return x.Addressline1
	}
	return ""
}

func (x *ThermostatResponse) GetAddressline2() string {
	if x != nil {
		return x.Addressline2
	}
	return ""
}

func (x *ThermostatResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ThermostatResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ThermostatResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ThermostatResponse) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *ThermostatResponse) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *ThermostatResponse) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

type ThermostatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostatid int64 `protobuf:"varint,1,opt,name=Thermostatid,json=thermostatid,proto3" json:"Thermostatid,omitempty"`
}

func (x *ThermostatRequest) Reset() {
	*x = ThermostatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermostatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermostatRequest) ProtoMessage() {}

func (x *ThermostatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermostatRequest.ProtoReflect.Descriptor instead.
func (*ThermostatRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *ThermostatRequest) GetThermostatid() int64 {
	if x != nil {
		return x.Thermostatid
	}
	return 0
}

type CreateThermostatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,1,opt,name=Info,json=info,proto3" json:"Info,omitempty"`
}

func (x *CreateThermostatResponse) Reset() {
	*x = CreateThermostatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThermostatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThermostatResponse) ProtoMessage() {}

func (x *CreateThermostatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThermostatResponse.ProtoReflect.Descriptor instead.
func (*CreateThermostatResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateThermostatResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type TemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostatid int64 `protobuf:"varint,1,opt,name=Thermostatid,json=thermostatid,proto3" json:"Thermostatid,omitempty"`
	Temperature  int64 `protobuf:"varint,2,opt,name=Temperature,json=temperature,proto3" json:"Temperature,omitempty"`
}

func (x *TemperatureRequest) Reset() {
	*x = TemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRequest) ProtoMessage() {}

func (x *TemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRequest.ProtoReflect.Descriptor instead.
func (*TemperatureRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *TemperatureRequest) GetThermostatid() int64 {
	if x != nil {
		return x.Thermostatid
	}
	return 0
}

func (x *TemperatureRequest) GetTemperature() int64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type FanmodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostatid int64  `protobuf:"varint,1,opt,name=Thermostatid,json=thermostatid,proto3" json:"Thermostatid,omitempty"`
	Fanmode      string `protobuf:"bytes,2,opt,name=Fanmode,json=fanmode,proto3" json:"Fanmode,omitempty"`
}

func (x *FanmodeRequest) Reset() {
	*x = FanmodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanmodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanmodeRequest) ProtoMessage() {}

func (x *FanmodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanmodeRequest.ProtoReflect.Descriptor instead.
func (*FanmodeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *FanmodeRequest) GetThermostatid() int64 {
	if x != nil {
		return x.Thermostatid
	}
	return 0
}

func (x *FanmodeRequest) GetFanmode() string {
	if x != nil {
		return x.Fanmode
	}
	return ""
}

type SystemmodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostatid int64  `protobuf:"varint,1,opt,name=Thermostatid,json=thermostatid,proto3" json:"Thermostatid,omitempty"`
	Systemmode   string `protobuf:"bytes,2,opt,name=Systemmode,json=systemmode,proto3" json:"Systemmode,omitempty"`
}

func (x *SystemmodeRequest) Reset() {
	*x = SystemmodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemmodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemmodeRequest) ProtoMessage() {}

func (x *SystemmodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemmodeRequest.ProtoReflect.Descriptor instead.
func (*SystemmodeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *SystemmodeRequest) GetThermostatid() int64 {
	if x != nil {
		return x.Thermostatid
	}
	return 0
}

func (x *SystemmodeRequest) GetSystemmode() string {
	if x != nil {
		return x.Systemmode
	}
	return ""
}

type ListthermostatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid int64 `protobuf:"varint,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
}

func (x *ListthermostatRequest) Reset() {
	*x = ListthermostatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListthermostatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListthermostatRequest) ProtoMessage() {}

func (x *ListthermostatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListthermostatRequest.ProtoReflect.Descriptor instead.
func (*ListthermostatRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListthermostatRequest) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

type ListthermostatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostats []*Thermostats `protobuf:"bytes,1,rep,name=thermostats,proto3" json:"thermostats,omitempty"`
}

func (x *ListthermostatResponse) Reset() {
	*x = ListthermostatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListthermostatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListthermostatResponse) ProtoMessage() {}

func (x *ListthermostatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListthermostatResponse.ProtoReflect.Descriptor instead.
func (*ListthermostatResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListthermostatResponse) GetThermostats() []*Thermostats {
	if x != nil {
		return x.Thermostats
	}
	return nil
}

type Thermostats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groupname          string `protobuf:"bytes,1,opt,name=Groupname,json=groupname,proto3" json:"Groupname,omitempty"`
	Thermostatname     string `protobuf:"bytes,2,opt,name=Thermostatname,json=thermostatname,proto3" json:"Thermostatname,omitempty"`
	Currenttemparature int32  `protobuf:"varint,3,opt,name=Currenttemparature,json=currenttemparature,proto3" json:"Currenttemparature,omitempty"`
	Sechudle           string `protobuf:"bytes,4,opt,name=Sechudle,json=sechudle,proto3" json:"Sechudle,omitempty"`
}

func (x *Thermostats) Reset() {
	*x = Thermostats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thermostats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thermostats) ProtoMessage() {}

func (x *Thermostats) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thermostats.ProtoReflect.Descriptor instead.
func (*Thermostats) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *Thermostats) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

func (x *Thermostats) GetThermostatname() string {
	if x != nil {
		return x.Thermostatname
	}
	return ""
}

func (x *Thermostats) GetCurrenttemparature() int32 {
	if x != nil {
		return x.Currenttemparature
	}
	return 0
}

func (x *Thermostats) GetSechudle() string {
	if x != nil {
		return x.Sechudle
	}
	return ""
}

type GroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid    int64  `protobuf:"varint,1,opt,name=Userid,json=userid,proto3" json:"Userid,omitempty"`
	Groupname string `protobuf:"bytes,2,opt,name=Groupname,json=groupname,proto3" json:"Groupname,omitempty"`
}

func (x *GroupRequest) Reset() {
	*x = GroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRequest) ProtoMessage() {}

func (x *GroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRequest.ProtoReflect.Descriptor instead.
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *GroupRequest) GetUserid() int64 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *GroupRequest) GetGroupname() string {
	if x != nil {
		return x.Groupname
	}
	return ""
}

type GroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,json=status,proto3" json:"Status,omitempty"`
}

func (x *GroupResponse) Reset() {
	*x = GroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupResponse) ProtoMessage() {}

func (x *GroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupResponse.ProtoReflect.Descriptor instead.
func (*GroupResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *GroupResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GroupchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     int64 `protobuf:"varint,1,opt,name=Username,json=username,proto3" json:"Username,omitempty"`
	Thermostatid int64 `protobuf:"varint,2,opt,name=Thermostatid,json=thermostatid,proto3" json:"Thermostatid,omitempty"`
	Groupid      int64 `protobuf:"varint,3,opt,name=Groupid,json=groupid,proto3" json:"Groupid,omitempty"`
}

func (x *GroupchangeRequest) Reset() {
	*x = GroupchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupchangeRequest) ProtoMessage() {}

func (x *GroupchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupchangeRequest.ProtoReflect.Descriptor instead.
func (*GroupchangeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *GroupchangeRequest) GetUsername() int64 {
	if x != nil {
		return x.Username
	}
	return 0
}

func (x *GroupchangeRequest) GetThermostatid() int64 {
	if x != nil {
		return x.Thermostatid
	}
	return 0
}

func (x *GroupchangeRequest) GetGroupid() int64 {
	if x != nil {
		return x.Groupid
	}
	return 0
}

type GroupchangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=Status,json=status,proto3" json:"Status,omitempty"`
}

func (x *GroupchangeResponse) Reset() {
	*x = GroupchangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupchangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupchangeResponse) ProtoMessage() {}

func (x *GroupchangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupchangeResponse.ProtoReflect.Descriptor instead.
func (*GroupchangeResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *GroupchangeResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type LocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location string `protobuf:"bytes,1,opt,name=Location,json=location,proto3" json:"Location,omitempty"`
}

func (x *LocationRequest) Reset() {
	*x = LocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationRequest) ProtoMessage() {}

func (x *LocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationRequest.ProtoReflect.Descriptor instead.
func (*LocationRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *LocationRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type LocationResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locationresponse []*LocationResponse `protobuf:"bytes,1,rep,name=locationresponse,proto3" json:"locationresponse,omitempty"`
}

func (x *LocationResponses) Reset() {
	*x = LocationResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationResponses) ProtoMessage() {}

func (x *LocationResponses) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationResponses.ProtoReflect.Descriptor instead.
func (*LocationResponses) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *LocationResponses) GetLocationresponse() []*LocationResponse {
	if x != nil {
		return x.Locationresponse
	}
	return nil
}

type LocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermostatname string `protobuf:"bytes,1,opt,name=Thermostatname,json=thermostatname,proto3" json:"Thermostatname,omitempty"`
	Thermostatid   int64  `protobuf:"varint,2,opt,name=Thermostatid,json=thermostatid,proto3" json:"Thermostatid,omitempty"`
	Currenttemp    int64  `protobuf:"varint,3,opt,name=Currenttemp,json=currenttemp,proto3" json:"Currenttemp,omitempty"`
}

func (x *LocationResponse) Reset() {
	*x = LocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationResponse) ProtoMessage() {}

func (x *LocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationResponse.ProtoReflect.Descriptor instead.
func (*LocationResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *LocationResponse) GetThermostatname() string {
	if x != nil {
		return x.Thermostatname
	}
	return ""
}

func (x *LocationResponse) GetThermostatid() int64 {
	if x != nil {
		return x.Thermostatid
	}
	return 0
}

func (x *LocationResponse) GetCurrenttemp() int64 {
	if x != nil {
		return x.Currenttemp
	}
	return 0
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x25, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xda, 0x09, 0x0a, 0x12, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x75, 0x6d, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x75, 0x6d, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x46, 0x61, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x61, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x65, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6f, 0x6c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x6c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x66, 0x72,
	0x69, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x66,
	0x72, 0x69, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73,
	0x74, 0x61, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x64,
	0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x6e, 0x64, 0x6f, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x48, 0x65, 0x61, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x6c, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6f,
	0x6c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x73, 0x74, 0x68, 0x65, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x68, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x63, 0x6f, 0x6f, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x63, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x75, 0x6d, 0x64, 0x69, 0x74,
	0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x75, 0x6d, 0x64, 0x69, 0x74, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x6e,
	0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x6c, 0x69, 0x6e,
	0x65, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x5a, 0x69,
	0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x22, 0x37, 0x0a, 0x11, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x12, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x4e, 0x0a, 0x0e, 0x46, 0x61, 0x6e, 0x6d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x61, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61,
	0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2f,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22,
	0x4e, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x0b, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x68, 0x75, 0x64, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x68, 0x75, 0x64, 0x6c,
	0x65, 0x22, 0x44, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x6e, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64,
	0x22, 0x2d, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x2d, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58,
	0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x68, 0x65,
	0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x32, 0x90, 0x06, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x2e, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x61, 0x64, 0x64, 0x12, 0x19, 0x2e, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x6e, 0x61, 0x6d,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x6d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07,
	0x46, 0x61, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x46, 0x61, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65,
	0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x12,
	0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x12, 0x18, 0x2e, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x12, 0x19, 0x2e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1f, 0x2e,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72,
	0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_service_proto_goTypes = []interface{}{
	(*Request)(nil),                  // 0: world.Request
	(*Response)(nil),                 // 1: world.Response
	(*ThermostatResponse)(nil),       // 2: world.ThermostatResponse
	(*ThermostatRequest)(nil),        // 3: world.ThermostatRequest
	(*CreateThermostatResponse)(nil), // 4: world.CreateThermostatResponse
	(*TemperatureRequest)(nil),       // 5: world.TemperatureRequest
	(*FanmodeRequest)(nil),           // 6: world.FanmodeRequest
	(*SystemmodeRequest)(nil),        // 7: world.SystemmodeRequest
	(*ListthermostatRequest)(nil),    // 8: world.ListthermostatRequest
	(*ListthermostatResponse)(nil),   // 9: world.ListthermostatResponse
	(*Thermostats)(nil),              // 10: world.Thermostats
	(*GroupRequest)(nil),             // 11: world.GroupRequest
	(*GroupResponse)(nil),            // 12: world.GroupResponse
	(*GroupchangeRequest)(nil),       // 13: world.GroupchangeRequest
	(*GroupchangeResponse)(nil),      // 14: world.GroupchangeResponse
	(*LocationRequest)(nil),          // 15: world.LocationRequest
	(*LocationResponses)(nil),        // 16: world.LocationResponses
	(*LocationResponse)(nil),         // 17: world.LocationResponse
}
var file_service_proto_depIdxs = []int32{
	10, // 0: world.ListthermostatResponse.thermostats:type_name -> world.Thermostats
	17, // 1: world.LocationResponses.locationresponse:type_name -> world.LocationResponse
	15, // 2: world.AddService.LocationGroup:input_type -> world.LocationRequest
	13, // 3: world.AddService.Groupadd:input_type -> world.GroupchangeRequest
	11, // 4: world.AddService.Groupnamecreate:input_type -> world.GroupRequest
	8,  // 5: world.AddService.ListThermostat:input_type -> world.ListthermostatRequest
	7,  // 6: world.AddService.SystemMode:input_type -> world.SystemmodeRequest
	6,  // 7: world.AddService.Fanmode:input_type -> world.FanmodeRequest
	5,  // 8: world.AddService.Settemperature:input_type -> world.TemperatureRequest
	0,  // 9: world.AddService.Usernames:input_type -> world.Request
	3,  // 10: world.AddService.DeleteThermostat:input_type -> world.ThermostatRequest
	3,  // 11: world.AddService.GetThermostat:input_type -> world.ThermostatRequest
	2,  // 12: world.AddService.CreaThermostat:input_type -> world.ThermostatResponse
	16, // 13: world.AddService.LocationGroup:output_type -> world.LocationResponses
	14, // 14: world.AddService.Groupadd:output_type -> world.GroupchangeResponse
	12, // 15: world.AddService.Groupnamecreate:output_type -> world.GroupResponse
	9,  // 16: world.AddService.ListThermostat:output_type -> world.ListthermostatResponse
	4,  // 17: world.AddService.SystemMode:output_type -> world.CreateThermostatResponse
	4,  // 18: world.AddService.Fanmode:output_type -> world.CreateThermostatResponse
	4,  // 19: world.AddService.Settemperature:output_type -> world.CreateThermostatResponse
	1,  // 20: world.AddService.Usernames:output_type -> world.Response
	4,  // 21: world.AddService.DeleteThermostat:output_type -> world.CreateThermostatResponse
	2,  // 22: world.AddService.GetThermostat:output_type -> world.ThermostatResponse
	4,  // 23: world.AddService.CreaThermostat:output_type -> world.CreateThermostatResponse
	13, // [13:24] is the sub-list for method output_type
	2,  // [2:13] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermostatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermostatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThermostatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanmodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemmodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListthermostatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListthermostatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thermostats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupchangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AddServiceClient is the client API for AddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddServiceClient interface {
	LocationGroup(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponses, error)
	Groupadd(ctx context.Context, in *GroupchangeRequest, opts ...grpc.CallOption) (*GroupchangeResponse, error)
	Groupnamecreate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	ListThermostat(ctx context.Context, in *ListthermostatRequest, opts ...grpc.CallOption) (*ListthermostatResponse, error)
	SystemMode(ctx context.Context, in *SystemmodeRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error)
	Fanmode(ctx context.Context, in *FanmodeRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error)
	Settemperature(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error)
	Usernames(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DeleteThermostat(ctx context.Context, in *ThermostatRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error)
	GetThermostat(ctx context.Context, in *ThermostatRequest, opts ...grpc.CallOption) (*ThermostatResponse, error)
	CreaThermostat(ctx context.Context, in *ThermostatResponse, opts ...grpc.CallOption) (*CreateThermostatResponse, error)
}

type addServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddServiceClient(cc grpc.ClientConnInterface) AddServiceClient {
	return &addServiceClient{cc}
}

func (c *addServiceClient) LocationGroup(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponses, error) {
	out := new(LocationResponses)
	err := c.cc.Invoke(ctx, "/world.AddService/LocationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Groupadd(ctx context.Context, in *GroupchangeRequest, opts ...grpc.CallOption) (*GroupchangeResponse, error) {
	out := new(GroupchangeResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/Groupadd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Groupnamecreate(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/Groupnamecreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) ListThermostat(ctx context.Context, in *ListthermostatRequest, opts ...grpc.CallOption) (*ListthermostatResponse, error) {
	out := new(ListthermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/ListThermostat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) SystemMode(ctx context.Context, in *SystemmodeRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error) {
	out := new(CreateThermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/SystemMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Fanmode(ctx context.Context, in *FanmodeRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error) {
	out := new(CreateThermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/Fanmode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Settemperature(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error) {
	out := new(CreateThermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/Settemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) Usernames(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/world.AddService/Usernames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) DeleteThermostat(ctx context.Context, in *ThermostatRequest, opts ...grpc.CallOption) (*CreateThermostatResponse, error) {
	out := new(CreateThermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/DeleteThermostat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) GetThermostat(ctx context.Context, in *ThermostatRequest, opts ...grpc.CallOption) (*ThermostatResponse, error) {
	out := new(ThermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/GetThermostat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addServiceClient) CreaThermostat(ctx context.Context, in *ThermostatResponse, opts ...grpc.CallOption) (*CreateThermostatResponse, error) {
	out := new(CreateThermostatResponse)
	err := c.cc.Invoke(ctx, "/world.AddService/CreaThermostat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddServiceServer is the server API for AddService service.
type AddServiceServer interface {
	LocationGroup(context.Context, *LocationRequest) (*LocationResponses, error)
	Groupadd(context.Context, *GroupchangeRequest) (*GroupchangeResponse, error)
	Groupnamecreate(context.Context, *GroupRequest) (*GroupResponse, error)
	ListThermostat(context.Context, *ListthermostatRequest) (*ListthermostatResponse, error)
	SystemMode(context.Context, *SystemmodeRequest) (*CreateThermostatResponse, error)
	Fanmode(context.Context, *FanmodeRequest) (*CreateThermostatResponse, error)
	Settemperature(context.Context, *TemperatureRequest) (*CreateThermostatResponse, error)
	Usernames(context.Context, *Request) (*Response, error)
	DeleteThermostat(context.Context, *ThermostatRequest) (*CreateThermostatResponse, error)
	GetThermostat(context.Context, *ThermostatRequest) (*ThermostatResponse, error)
	CreaThermostat(context.Context, *ThermostatResponse) (*CreateThermostatResponse, error)
}

// UnimplementedAddServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAddServiceServer struct {
}

func (*UnimplementedAddServiceServer) LocationGroup(context.Context, *LocationRequest) (*LocationResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationGroup not implemented")
}
func (*UnimplementedAddServiceServer) Groupadd(context.Context, *GroupchangeRequest) (*GroupchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Groupadd not implemented")
}
func (*UnimplementedAddServiceServer) Groupnamecreate(context.Context, *GroupRequest) (*GroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Groupnamecreate not implemented")
}
func (*UnimplementedAddServiceServer) ListThermostat(context.Context, *ListthermostatRequest) (*ListthermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThermostat not implemented")
}
func (*UnimplementedAddServiceServer) SystemMode(context.Context, *SystemmodeRequest) (*CreateThermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMode not implemented")
}
func (*UnimplementedAddServiceServer) Fanmode(context.Context, *FanmodeRequest) (*CreateThermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fanmode not implemented")
}
func (*UnimplementedAddServiceServer) Settemperature(context.Context, *TemperatureRequest) (*CreateThermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settemperature not implemented")
}
func (*UnimplementedAddServiceServer) Usernames(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Usernames not implemented")
}
func (*UnimplementedAddServiceServer) DeleteThermostat(context.Context, *ThermostatRequest) (*CreateThermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThermostat not implemented")
}
func (*UnimplementedAddServiceServer) GetThermostat(context.Context, *ThermostatRequest) (*ThermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThermostat not implemented")
}
func (*UnimplementedAddServiceServer) CreaThermostat(context.Context, *ThermostatResponse) (*CreateThermostatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreaThermostat not implemented")
}

func RegisterAddServiceServer(s *grpc.Server, srv AddServiceServer) {
	s.RegisterService(&_AddService_serviceDesc, srv)
}

func _AddService_LocationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).LocationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/LocationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).LocationGroup(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Groupadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Groupadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/Groupadd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Groupadd(ctx, req.(*GroupchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Groupnamecreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Groupnamecreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/Groupnamecreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Groupnamecreate(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_ListThermostat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListthermostatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).ListThermostat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/ListThermostat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).ListThermostat(ctx, req.(*ListthermostatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_SystemMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemmodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).SystemMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/SystemMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).SystemMode(ctx, req.(*SystemmodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Fanmode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanmodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Fanmode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/Fanmode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Fanmode(ctx, req.(*FanmodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Settemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Settemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/Settemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Settemperature(ctx, req.(*TemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_Usernames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Usernames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/Usernames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Usernames(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_DeleteThermostat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermostatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).DeleteThermostat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/DeleteThermostat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).DeleteThermostat(ctx, req.(*ThermostatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_GetThermostat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermostatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).GetThermostat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/GetThermostat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).GetThermostat(ctx, req.(*ThermostatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddService_CreaThermostat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThermostatResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).CreaThermostat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/world.AddService/CreaThermostat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).CreaThermostat(ctx, req.(*ThermostatResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "world.AddService",
	HandlerType: (*AddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocationGroup",
			Handler:    _AddService_LocationGroup_Handler,
		},
		{
			MethodName: "Groupadd",
			Handler:    _AddService_Groupadd_Handler,
		},
		{
			MethodName: "Groupnamecreate",
			Handler:    _AddService_Groupnamecreate_Handler,
		},
		{
			MethodName: "ListThermostat",
			Handler:    _AddService_ListThermostat_Handler,
		},
		{
			MethodName: "SystemMode",
			Handler:    _AddService_SystemMode_Handler,
		},
		{
			MethodName: "Fanmode",
			Handler:    _AddService_Fanmode_Handler,
		},
		{
			MethodName: "Settemperature",
			Handler:    _AddService_Settemperature_Handler,
		},
		{
			MethodName: "Usernames",
			Handler:    _AddService_Usernames_Handler,
		},
		{
			MethodName: "DeleteThermostat",
			Handler:    _AddService_DeleteThermostat_Handler,
		},
		{
			MethodName: "GetThermostat",
			Handler:    _AddService_GetThermostat_Handler,
		},
		{
			MethodName: "CreaThermostat",
			Handler:    _AddService_CreaThermostat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
